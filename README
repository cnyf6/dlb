
Dynamic Load Library
------------------------------------------------------------

Marta Garcia Gasulla
<marta.garcia@bsc.es>

Version 2.0
Support for: OpenMP + MPI 
	     SMPSs + MPI

------------------------------------------------------------
0 CONTENTS
------------------------------------------------------------
1 PACKAGE CONTENT
2 COMPILING AND INSTALLING THE LIBRARY
3 EXECUTING THE LIBRARY
4 LOAD BALANCING POLICIES IMPLEMENTED
5 DEPENDENCES


------------------------------------------------------------
1 PACKAGE CONTENT
------------------------------------------------------------
dlb/
	README			: This file
	Makefile		: Makefile to build the library in 32 and 64 bits versions. Main Rules: all, lib32, lib64
	Makefile.obj		: Auxiliar Makefile containing name of files belonging to the library to be compiled

	bin/			: Folder containing auxiliar tools
		adderDLB	: Script to add description of DLB related events to a trace
				  It expects as a parameter the .pcf file of the trace we want to modify

	lib/			: Folder containing the dynamic libraries
		32|64/		: 32|64 bits versions
			libdlb.so		: Dynamic DLB library
			libTdlb.so		: Dynamic DLB library to run with tracing
			libUpdRes.so		: Library containing a dummy UpdateResources symbol to compile OpenMP applications for DLB

	dlb/			: Folder containing the source files for the core of the library

	DPD/			: Folder containing the Dinamic Periodicity Detector source files

	LB_arch/		: Folder containing the source files that architecture dependant (Number of cores per node for example)

	LB_comm/		: Folder containing the source files implementing communication aspects

	LB_MPI/			: Folder containing the source files from the MPI layer

	LB_numThreads/		: Folder containing the source files to change the number of resources

	LB_policies/		: Folder containing the source files fo the Load balancing policies implemented

	
------------------------------------------------------------
2 COMPILING AND INSTALLING THE LIBRARY
------------------------------------------------------------
First modify the file: LB_arch/arch.h to set CPUS_NODE to the number of cores available per node.

Second modify the Makefile to the correct compiler, paths and flags. 

MPIINCLUDE : Path to the include folder of the MPI's installation we will be using.

The file: LB_comm/comm_lend_light.c must be compiled with gcc because it contains calls to some builtins.

You can change rule "all" to contain only the libraries you are interested in compiling.

Finally:
$> make all

Will build all the libraries

------------------------------------------------------------
3 EXECUTING THE LIBRARY
------------------------------------------------------------

3.1 DLB Environment Variables:

- LB_JUST_BARRIER: Set it if you just want to intercept barriers. If it is not set all the MPI blocking calls will be intercepted.

- LB_LEND_MODE: BLOCK: MPI blocking calls (not consuming cpu)
		1CPU: Not MPI blocking calls (default)

- LB_MPIxNODE: Number of MPI processes running per node

- LB_POLICY: See section "4 LOAD BALANCING POLICIES IMPLEMENTED"

- LB_PROFILE: YES | NO: To obtain profiling information about the execution, not recomended. 

- LB_BIND: YES | NO: To bind or not threads to cpus. Only for SMPSs applications. Must be coherent with the parameter: "dlb.bindCPUS.enable=1" in the smpss configuration file

- LD_PRELOAD

3.2 SMPSS Environment Variables:

- CSS_NUM_CPUS: Default number of smpss threads that will have each MPI process
- CSS_MAX_CPUS: Number of cores available per node. I.e the maximum number of threads that can run in one node.
- CSS_CONFIG_FILE: A smpss configuration file containing at least te following line: "dlb.enable=1"

3.3 OpenMP Environment Variables:

- OMP_NUM_THREADS: Number of cores available per node. I.e the maximum number of threads that can run in one node.


------------------------------------------------------------
4 LOAD BALANCING POLICIES IMPLEMENTED
------------------------------------------------------------
NO: Do not Load Balance. This policy is useful for obtaining profiling information about the application.

WEIGHT: Iterative Load balancing algorithm based on redistributing the number of threads depending on the load detected for each of the MPI processes.

LeWI: Lend CPUS when MPI process is Idle in a blocking MPI call.

Map: Same as LeWI but the 
------------------------------------------------------------
5 DEPENDENCES
------------------------------------------------------------
GCC		: The file: LB_comm/comm_lend_light.c must be compiled with gcc because it contains calls to some builtins.
MPI library	: An installation of MPI is necessary to compile DLB 

----------------------------------------------------------
